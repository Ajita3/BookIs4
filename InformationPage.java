/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.BookIs.view;

import com.bookis.controller.ValidationUtil; 
import com.bookis.model.Bookmodel;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import com.BookIs.controller.algorithms.SelectionSort;
import java.util.List;
import com.BookIs.controller.algorithms.MergeSort;
import com.BookIs.controller.algorithms.InsertionSort;
import com.BookIs.controller.algorithms.BinarySearch;
/**
 *
 * @author ajita
 */
public class InformationPage extends javax.swing.JFrame {
private final ArrayList <Bookmodel> BookList ;
private final ValidationUtil validations;
private final SelectionSort selectionSort;




    private DefaultTableModel defaultTableModel;
    
    /**
     * Creates new form InformationPage
     */
    public InformationPage() {
        initComponents();
        BookList = new ArrayList();
        validations = new ValidationUtil();
        selectionSort = new SelectionSort();
       
        
     addNewInitialBook(new Bookmodel("Palace Of Illusions", 9780667, 2008, 800, "Historical Fiction" ));
     addNewInitialBook(new Bookmodel("A Thousand Splendid Suns", 8909891, 2007, 750, "Domestic Fiction" ));
     addNewInitialBook(new Bookmodel("Firfire", 8767552, 2016, 778, "Fiction" ));
     addNewInitialBook(new Bookmodel("The Myth Of Sisyphus", 7898080, 1942, 1000, "Philosophical Essay" ));
     addNewInitialBook(new Bookmodel("The Waves", 5068907, 1931, 1500, "Experimental Literature" ));
    }

    
  
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainScreen = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        lblBookInfoTblHeading = new javax.swing.JLabel();
        scrlpaneTbl = new javax.swing.JScrollPane();
        tblbook = new javax.swing.JTable();
        txtfldpublishedyear = new javax.swing.JTextField();
        txtfldisbn = new javax.swing.JTextField();
        txtfldname = new javax.swing.JTextField();
        txtfldgenre = new javax.swing.JTextField();
        lblImage = new javax.swing.JLabel();
        btnupdatebook = new javax.swing.JButton();
        btnRead = new javax.swing.JButton();
        btndeletebook = new javax.swing.JButton();
        btnbackhomeinf = new javax.swing.JButton();
        txtfldprice = new javax.swing.JTextField();
        lblBookdataform = new javax.swing.JLabel();
        lbISBN = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        lblGenre = new javax.swing.JLabel();
        lblPublishedYear = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnSortbyName = new javax.swing.JButton();
        btnSortbyISBN = new javax.swing.JButton();
        btnSortbyPrice = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtfldSearch = new javax.swing.JTextField();
        lblSearchIcon = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlMainScreen.setBackground(new java.awt.Color(153, 153, 255));

        lblLogo.setFont(new java.awt.Font("Segoe Script", 3, 14)); // NOI18N
        lblLogo.setText("kafkaklub");

        lblBookInfoTblHeading.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblBookInfoTblHeading.setForeground(new java.awt.Color(153, 0, 0));
        lblBookInfoTblHeading.setText("Book Information Table");

        tblbook.setBackground(new java.awt.Color(153, 0, 0));
        tblbook.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblbook.setForeground(new java.awt.Color(255, 255, 255));
        tblbook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "ISBN", "Published Year", "Price", "Genre"
            }
        ));
        scrlpaneTbl.setViewportView(tblbook);

        txtfldpublishedyear.setBackground(new java.awt.Color(153, 0, 0));
        txtfldpublishedyear.setForeground(new java.awt.Color(255, 255, 255));
        txtfldpublishedyear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtfldpublishedyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldpublishedyearActionPerformed(evt);
            }
        });

        txtfldisbn.setBackground(new java.awt.Color(153, 0, 0));
        txtfldisbn.setForeground(new java.awt.Color(255, 255, 255));
        txtfldisbn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtfldisbn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldisbnActionPerformed(evt);
            }
        });

        txtfldname.setBackground(new java.awt.Color(153, 0, 0));
        txtfldname.setForeground(new java.awt.Color(255, 255, 255));
        txtfldname.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtfldname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldnameActionPerformed(evt);
            }
        });

        txtfldgenre.setBackground(new java.awt.Color(153, 0, 0));
        txtfldgenre.setForeground(new java.awt.Color(255, 255, 255));
        txtfldgenre.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtfldgenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldgenreActionPerformed(evt);
            }
        });

        lblImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bookis/resources/InfoPageimg.jpg"))); // NOI18N
        lblImage.setText("jLabel3");

        btnupdatebook.setBackground(new java.awt.Color(153, 0, 0));
        btnupdatebook.setForeground(new java.awt.Color(255, 255, 255));
        btnupdatebook.setText("Update");
        btnupdatebook.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnupdatebook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnupdatebookActionPerformed(evt);
            }
        });

        btnRead.setBackground(new java.awt.Color(153, 0, 0));
        btnRead.setForeground(new java.awt.Color(255, 255, 255));
        btnRead.setText("Read");
        btnRead.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadActionPerformed(evt);
            }
        });

        btndeletebook.setBackground(new java.awt.Color(153, 0, 0));
        btndeletebook.setForeground(new java.awt.Color(255, 255, 255));
        btndeletebook.setText("Delete");
        btndeletebook.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btndeletebook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndeletebookActionPerformed(evt);
            }
        });

        btnbackhomeinf.setBackground(new java.awt.Color(153, 0, 0));
        btnbackhomeinf.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnbackhomeinf.setForeground(new java.awt.Color(255, 255, 255));
        btnbackhomeinf.setText("BACK");
        btnbackhomeinf.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnbackhomeinf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbackhomeinfActionPerformed(evt);
            }
        });

        txtfldprice.setBackground(new java.awt.Color(153, 0, 0));
        txtfldprice.setForeground(new java.awt.Color(255, 255, 255));
        txtfldprice.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtfldprice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldpriceActionPerformed(evt);
            }
        });

        lblBookdataform.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblBookdataform.setForeground(new java.awt.Color(153, 0, 0));
        lblBookdataform.setText("Book Data Form");

        lbISBN.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lbISBN.setForeground(new java.awt.Color(153, 0, 0));
        lbISBN.setText("ISBN");

        lblName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblName.setForeground(new java.awt.Color(153, 0, 0));
        lblName.setText("Name");

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(153, 0, 0));
        lblPrice.setText("Price");

        lblGenre.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblGenre.setForeground(new java.awt.Color(153, 0, 0));
        lblGenre.setText("Genre");

        lblPublishedYear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPublishedYear.setForeground(new java.awt.Color(153, 0, 0));
        lblPublishedYear.setText("Published Year");

        btnCreate.setBackground(new java.awt.Color(153, 0, 0));
        btnCreate.setForeground(new java.awt.Color(255, 255, 255));
        btnCreate.setText("Create");
        btnCreate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnSortbyName.setBackground(new java.awt.Color(153, 0, 0));
        btnSortbyName.setForeground(new java.awt.Color(255, 255, 255));
        btnSortbyName.setText("Sort by Name");
        btnSortbyName.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSortbyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortbyNameActionPerformed(evt);
            }
        });

        btnSortbyISBN.setBackground(new java.awt.Color(153, 0, 0));
        btnSortbyISBN.setForeground(new java.awt.Color(255, 255, 255));
        btnSortbyISBN.setText("Sort by ISBN");
        btnSortbyISBN.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSortbyISBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortbyISBNActionPerformed(evt);
            }
        });

        btnSortbyPrice.setBackground(new java.awt.Color(153, 0, 0));
        btnSortbyPrice.setForeground(new java.awt.Color(255, 255, 255));
        btnSortbyPrice.setText("Sort by Price");
        btnSortbyPrice.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSortbyPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSortbyPriceActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(153, 0, 0));
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtfldSearch.setBackground(new java.awt.Color(153, 0, 0));
        txtfldSearch.setForeground(new java.awt.Color(255, 255, 255));
        txtfldSearch.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        txtfldSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfldSearchActionPerformed(evt);
            }
        });

        lblSearchIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/bookis/resources/SearchIcon.jpg"))); // NOI18N
        lblSearchIcon.setText("jLabel1");

        btnClear.setBackground(new java.awt.Color(153, 0, 0));
        btnClear.setForeground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMainScreenLayout = new javax.swing.GroupLayout(pnlMainScreen);
        pnlMainScreen.setLayout(pnlMainScreenLayout);
        pnlMainScreenLayout.setHorizontalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainScreenLayout.createSequentialGroup()
                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(scrlpaneTbl))
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addComponent(lblLogo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSortbyISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSortbyName, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSortbyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtfldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblSearchIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblBookInfoTblHeading)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblName)
                            .addComponent(lblPrice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtfldprice, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtfldname, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnbackhomeinf, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainScreenLayout.createSequentialGroup()
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                .addComponent(lblGenre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtfldgenre, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                .addComponent(lbISBN)
                                .addGap(18, 18, 18)
                                .addComponent(txtfldisbn, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainScreenLayout.createSequentialGroup()
                                .addComponent(btnupdatebook, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26))
                            .addComponent(lblPublishedYear, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(12, 12, 12)
                        .addComponent(txtfldpublishedyear, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainScreenLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRead, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btndeletebook, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))))
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addGap(499, 499, 499)
                .addComponent(lblBookdataform)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMainScreenLayout.setVerticalGroup(
            pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addContainerGap(379, Short.MAX_VALUE)
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtfldname, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(27, 27, 27)
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtfldprice, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRead, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnupdatebook, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btndeletebook, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnbackhomeinf, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                                .addComponent(lblLogo)
                                                .addGap(45, 45, 45))
                                            .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(btnSortbyISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnSortbyName, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(btnSortbyPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtfldSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(lblSearchIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(lblBookInfoTblHeading, javax.swing.GroupLayout.Alignment.TRAILING))
                                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                        .addGap(17, 17, 17)
                                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(scrlpaneTbl, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblImage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBookdataform)
                        .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                        .addComponent(lbISBN, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(47, 47, 47)
                                        .addComponent(lblGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                        .addComponent(txtfldisbn, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtfldgenre, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(pnlMainScreenLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(pnlMainScreenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPublishedYear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtfldpublishedyear, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(50, 50, 50))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(pnlMainScreen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlMainScreen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtfldpublishedyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldpublishedyearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldpublishedyearActionPerformed

    private void txtfldisbnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldisbnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldisbnActionPerformed

    private void txtfldnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldnameActionPerformed

    private void txtfldgenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldgenreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldgenreActionPerformed

    private void btnupdatebookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnupdatebookActionPerformed
    updateBook();
            
    }//GEN-LAST:event_btnupdatebookActionPerformed

    private void btnReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadActionPerformed
     readBook();    

    }//GEN-LAST:event_btnReadActionPerformed

    private void btndeletebookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndeletebookActionPerformed
    deleteBook();
           
    }//GEN-LAST:event_btndeletebookActionPerformed

    private void btnbackhomeinfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbackhomeinfActionPerformed
        new HomePage().setVisible(true);
    }//GEN-LAST:event_btnbackhomeinfActionPerformed

    private void txtfldpriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldpriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfldpriceActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
     addNewBook();      
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnSortbyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortbyNameActionPerformed
       sortByName(); // TODO add your handling code here:
    }//GEN-LAST:event_btnSortbyNameActionPerformed

    private void btnSortbyISBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortbyISBNActionPerformed
        sortBooksByIsbn(false); // TODO add your handling code here:
    }//GEN-LAST:event_btnSortbyISBNActionPerformed

    private void btnSortbyPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSortbyPriceActionPerformed
      sortByPrice(true);  // TODO add your handling code here:
    }//GEN-LAST:event_btnSortbyPriceActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
       searchByName(); // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtfldSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfldSearchActionPerformed
       
       // TODO add your handling code here:
    }//GEN-LAST:event_txtfldSearchActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtfldname.setText("");
        txtfldisbn.setText("");
        txtfldpublishedyear.setText("");
        txtfldprice.setText("");
        txtfldgenre.setText("");

    }//GEN-LAST:event_btnClearActionPerformed

private void searchByName() {
    // Get the search term from the text field
    String searchTerm = txtfldSearch.getText().trim();  

    // Check if the search term is empty
    if (searchTerm.isEmpty()) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please enter a book name to search.");
        return; // Stop further execution if the search term is empty
    }

    // Initialize MergeSort and BinarySearch
    MergeSort mergeSort = new MergeSort();
    BinarySearch binarySearch = new BinarySearch();

    // Sort the book list by name using MergeSort
    List<Bookmodel> sortedBooks = mergeSort.sortByName(BookList);

    // Perform binary search to find the book
    Bookmodel foundBook = binarySearch.searchByName(sortedBooks, searchTerm);

    // If found, show a success message; otherwise, show a failure message
    if (foundBook != null) {
        javax.swing.JOptionPane.showMessageDialog(this, "Book found: " + foundBook.getName());
    } else {
        javax.swing.JOptionPane.showMessageDialog(this, "Book not found.");
    }
}


  private void sortByPrice(boolean isDesc) {
    // Create an instance of InsertionSort
    InsertionSort insertionSort = new InsertionSort();

    // Sort the BookList by price using InsertionSort
    List<Bookmodel> sortedBooks = insertionSort.sortByPrice(BookList, isDesc);

    // Update the table with the sorted list
    updateTableWithSortedBooks(sortedBooks);
}



    
// The method that will be triggered by the Sort button click
private void sortBooksByIsbn(boolean isDesc) {
  
   

    // Sort the BookList by ISBN using SelectionSort
    List<Bookmodel> sortedBooks = selectionSort.sortByIsbn(BookList, isDesc);

    // Update the table with the sorted list
    updateTableWithSortedBooks(sortedBooks);
}

// Update the JTable with the sorted books
private void updateTableWithSortedBooks(List<Bookmodel> sortedBooks) {
    DefaultTableModel model = (DefaultTableModel) tblbook.getModel();

    // Clear the existing rows
    model.setRowCount(0);

    // Add the sorted books to the table
    for (Bookmodel book : sortedBooks) {
        model.addRow(new Object[]{
            book.getName(),
            book.getIsbn(),
            book.getPublishedYear(),
            book.getPrice(),
            book.getGenre()
        });
    }
}
 public void updateTable(List<Bookmodel> books) {
        DefaultTableModel model = (DefaultTableModel) tblbook.getModel();
        model.setRowCount(0);  // Clear existing rows
        for (Bookmodel book : books) {
            model.addRow(new Object[]{book.getName(), book.getIsbn(), book.getPublishedYear(), book.getPrice(), book.getGenre()});
        }
    }
public void sortByName() {
        MergeSort mergeSort = new MergeSort();
        List<Bookmodel> sortedBooks = mergeSort.sortByName(BookList);  // Sort the book list
        
        // Update the table with sorted books
        updateTable(sortedBooks);
    }
                          
private void addNewInitialBook(Bookmodel book) {
       BookList.add(book);
       addDataToTable(book);
   }
    
private void addDataToTable(Bookmodel book) {
    DefaultTableModel defaultTableModel = (DefaultTableModel) tblbook.getModel(); 
    int rowCount = defaultTableModel.getRowCount(); 
    defaultTableModel.insertRow(0, new Object[]{book.getName(), 
                                              book.getIsbn(), 
                                              book.getPublishedYear(), 
                                              book.getPrice(), 
                                              book.getGenre()}); 
}

private void addBookDataToTable(Bookmodel book) {
    DefaultTableModel defaultTableModel = (DefaultTableModel) tblbook.getModel();

    // Find the first empty row
    int emptyRow = -1;
    for (int i = 0; i < defaultTableModel.getRowCount(); i++) {
        if (defaultTableModel.getValueAt(i, 0) == null) {
            emptyRow = i;
            break;
        }
    }

    // If no empty row found, insert at the beginning
    if (emptyRow == -1) {
        defaultTableModel.insertRow(0, new Object[]{book.getName(), 
                                                     book.getIsbn(), 
                                                     book.getPublishedYear(), 
                                                     book.getPrice(), 
                                                     book.getGenre()});
    } else {
        // Insert the new book at the empty row
        defaultTableModel.setValueAt(book.getName(), emptyRow, 0);
        defaultTableModel.setValueAt(book.getIsbn(), emptyRow, 1);
        defaultTableModel.setValueAt(book.getPublishedYear(), emptyRow, 2);
        defaultTableModel.setValueAt(book.getPrice(), emptyRow, 3);
        defaultTableModel.setValueAt(book.getGenre(), emptyRow, 4);
    }
}



 
    private void addNewBook() {
    String name = txtfldname.getText();
    String isbnText = txtfldisbn.getText();
    String yearText = txtfldpublishedyear.getText();
    String priceText = txtfldprice.getText();
    String genre = txtfldgenre.getText();

    // Validate the input
    if (ValidationUtil.isNullOrEmpty(name) || ValidationUtil.isNullOrEmpty(isbnText) ||
            ValidationUtil.isNullOrEmpty(yearText) || ValidationUtil.isNullOrEmpty(priceText) || ValidationUtil.isNullOrEmpty(genre)) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please fill in all the fields.");
        return; // Exit the method if any field is empty
    }

    try {
        int isbn = Integer.parseInt(txtfldisbn.getText());
        int publishedYear = Integer.parseInt(txtfldpublishedyear.getText());
        int price = Integer.parseInt(txtfldprice.getText());

        if (isISBNExists(isbn)) {
    // Create an error message dialog
    javax.swing.JOptionPane.showMessageDialog(this, 
            "Book with the given ISBN already exists. \nPlease enter a unique ISBN.", 
            "Error: Duplicate ISBN", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
    return; // Exit the method if ISBN already exists
}

        // Validate the fields
        if (!ValidationUtil.isValidName(name) || !ValidationUtil.isValidISBN(isbn) ||
                !ValidationUtil.isValidPublishedYear(publishedYear) || !ValidationUtil.isValidPrice(price) || !ValidationUtil.isValidGenre(genre)) {
           javax.swing.JOptionPane.showMessageDialog(this, 
            "Invalid details. \nPlease enter valid details.", 
            "Error: Invalid Details", 
            javax.swing.JOptionPane.ERROR_MESSAGE);  
            return; // Exit the method if any validation fails
        }

        // Create a new book and add it to the list
        Bookmodel book = new Bookmodel(name, isbn, publishedYear, price, genre);
        BookList.add(book);

        // Add the new book to the table
        addBookDataToTable(book);

        javax.swing.JOptionPane.showMessageDialog(this, "Book added successfully!");

    } catch (NumberFormatException e) {
        javax.swing.JOptionPane.showMessageDialog(this, 
            "Alpabetical value are not allowed for ISBN, price and published year. \nPlease enter numeric values for ISBN, price and published year.", 
            "Error: Invalid ISBN, Price and published year", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
        
    }
}

// Helper method to check if the ISBN already exists in the BookList
private boolean isISBNExists(int isbn) {
    for (Bookmodel book : BookList) {
        if (book.getIsbn() == isbn) {
            return true;
        }
    }
    return false;
}
 private void updateBookDataInTable(int rowIndex, Bookmodel updatedBook) {
    
    DefaultTableModel model = (DefaultTableModel) tblbook.getModel();
    
    // Update the row with the new book data
    model.setValueAt(updatedBook.getName(), rowIndex, 0);  // Update name at column 0
    model.setValueAt(updatedBook.getIsbn(), rowIndex, 1);  // Update ISBN at column 1
    model.setValueAt(updatedBook.getPublishedYear(), rowIndex, 2); // Update published year at column 2
    model.setValueAt(updatedBook.getPrice(), rowIndex, 3); // Update price at column 3
    model.setValueAt(updatedBook.getGenre(), rowIndex, 4); // Update genre at column 4
    
}

    private void updateBook() {
    String name = txtfldname.getText();
    String isbnText = txtfldisbn.getText();
    String yearText = txtfldpublishedyear.getText();
    String priceText = txtfldprice.getText();
    String genre = txtfldgenre.getText();

    // Validate the input
    if (ValidationUtil.isNullOrEmpty(name) || ValidationUtil.isNullOrEmpty(isbnText) ||
            ValidationUtil.isNullOrEmpty(yearText) || ValidationUtil.isNullOrEmpty(priceText) || ValidationUtil.isNullOrEmpty(genre)) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please fill in all the fields.");
        return;
    }

    try {
        int isbn = Integer.parseInt(txtfldisbn.getText());
        int publishedYear = Integer.parseInt(txtfldpublishedyear.getText());
        int price = Integer.parseInt(txtfldprice.getText());

        // Validate the fields
        if (!ValidationUtil.isValidName(name) || !ValidationUtil.isValidISBN(isbn) ||
                !ValidationUtil.isValidPublishedYear(publishedYear) || !ValidationUtil.isValidPrice(price) || !ValidationUtil.isValidGenre(genre)) {
            javax.swing.JOptionPane.showMessageDialog(this, 
            "Invalid details. \nPlease enter valid details.", 
            "Error: Invalid Details", 
            javax.swing.JOptionPane.ERROR_MESSAGE);  
            return; // Exit the method if any validation fails

            
        }

        boolean bookFound = false; 

        for (int i = 0; i < BookList.size(); i++) {
            Bookmodel book = BookList.get(i);
            if (book.getIsbn() == isbn) {
                book.setName(name);
                book.setPublishedYear(publishedYear);
                book.setPrice(price);
                book.setGenre(genre);

                // Optionally, refresh the table to show updated data
                updateBookDataInTable(i, book);

                bookFound = true; 
                break; // Exit the loop after successful update
            }
        }

        if (bookFound) {
            javax.swing.JOptionPane.showMessageDialog(this, "Book updated successfully!");
        } else {
             javax.swing.JOptionPane.showMessageDialog(this, 
            "Book with the given ISBN not found. \nPlease enter ISBN that is already present to update.", 
            "Error: Book with the given ISBN not found", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
            
        }

    } catch (NumberFormatException e) {
         javax.swing.JOptionPane.showMessageDialog(this, 
            "Alpabetical values are not allowed for ISBN, price and published year. \nPlease enter numeric values for ISBN, price and published year.", 
            "Error: Invalid ISBN, Price and published year", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
    }
}



    private void readBook() {
    String isbnText = txtfldisbn.getText();

    if (ValidationUtil.isNullOrEmpty(isbnText)) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please enter ISBN to search for a book.");
        return;
    }

    try {
        int isbn = Integer.parseInt(isbnText);

        // Search for the book by ISBN
        for (Bookmodel book : BookList) {
            if (book.getIsbn() == isbn) {
                // populate the form with the book details
                txtfldname.setText(book.getName());
                txtfldpublishedyear.setText(String.valueOf(book.getPublishedYear()));
                txtfldprice.setText(String.valueOf(book.getPrice()));
                txtfldgenre.setText(book.getGenre());
                
                javax.swing.JOptionPane.showMessageDialog(this, "Book found!");
                return;
            }
        }

        javax.swing.JOptionPane.showMessageDialog(this, 
            "Book with the given ISBN not found. \nPlease enter ISBN that is already present to read.", 
            "Error: Book with the given ISBN not found", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
    } catch (NumberFormatException e) {
        javax.swing.JOptionPane.showMessageDialog(this, 
            "Alpabetical value is not allowed for ISBN. \nPlease enter numeric value for ISBN.", 
            "Error: Invalid ISBN", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
       
    }
}
    

        
private void removeBookFromTable(Bookmodel removedBook) {
    
    DefaultTableModel model = (DefaultTableModel) tblbook.getModel();
    
    // Loop through the rows of the table to find the book
    for (int i = 0; i < model.getRowCount(); i++) {
        // Assuming ISBN is stored in the second column (index 1) of the table
        int tableIsbn = (int) model.getValueAt(i, 1);  // Index 1 for ISBN
        
        if (tableIsbn == removedBook.getIsbn()) {
            // Remove the row that corresponds to the book
            model.removeRow(i);
            return;
        }
    }
}    
    private void deleteBook() {
    String isbnText = txtfldisbn.getText();

    if (ValidationUtil.isNullOrEmpty(isbnText)) {
        javax.swing.JOptionPane.showMessageDialog(this, "Please enter ISBN to delete the book.");
        return;
    }

    try {
        int isbn = Integer.parseInt(isbnText);

        // Search and delete the book by ISBN
        for (Bookmodel book : BookList) {
            if (book.getIsbn() == isbn) {
                BookList.remove(book);
                
                // Optionally, refresh the table after deletion
                removeBookFromTable(book);
                
                javax.swing.JOptionPane.showMessageDialog(this, "Book deleted successfully!");
                return;
            }
        }
         javax.swing.JOptionPane.showMessageDialog(this, 
            "Book with the given ISBN not found. \nPlease enter ISBN that is already present to delete.", 
            "Error: Book with the given ISBN not found", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
        
    } catch (NumberFormatException e) {
       javax.swing.JOptionPane.showMessageDialog(this, 
            "Alpabetical value is not allowed for ISBN. \nPlease enter numeric value for ISBN.", 
            "Error: Invalid ISBN", 
            javax.swing.JOptionPane.ERROR_MESSAGE); 
    }
}

  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InformationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InformationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InformationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InformationPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InformationPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSortbyISBN;
    private javax.swing.JButton btnSortbyName;
    private javax.swing.JButton btnSortbyPrice;
    private javax.swing.JButton btnbackhomeinf;
    private javax.swing.JButton btndeletebook;
    private javax.swing.JButton btnupdatebook;
    private javax.swing.JLabel lbISBN;
    private javax.swing.JLabel lblBookInfoTblHeading;
    private javax.swing.JLabel lblBookdataform;
    private javax.swing.JLabel lblGenre;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPublishedYear;
    private javax.swing.JLabel lblSearchIcon;
    private javax.swing.JPanel pnlMainScreen;
    private javax.swing.JScrollPane scrlpaneTbl;
    private javax.swing.JTable tblbook;
    private javax.swing.JTextField txtfldSearch;
    private javax.swing.JTextField txtfldgenre;
    private javax.swing.JTextField txtfldisbn;
    private javax.swing.JTextField txtfldname;
    private javax.swing.JTextField txtfldprice;
    private javax.swing.JTextField txtfldpublishedyear;
    // End of variables declaration//GEN-END:variables

}
